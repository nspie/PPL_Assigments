(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )

 (define make-error
  (lambda (msg)
      (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res) 
      (if (eq? (car res) "Ok") 
        #t
        #f
    )
      #f 
      )
  )
)


(define error?
  (lambda (res)
    (if (pair? res) 
      (if (eq? (car res) "Failure") 
        #t
        #f
    )
      #f 
      )
  )
)

(define result?
  (lambda (res)
    (if (pair? res)
    (if (ok? res) 
        #t 
        (if (error? res)
         #t 
         #f
         ))
      #f
    )
  )
)


(define result->val
  (lambda (res)
    (if (result? res) 
    (cdr res)
     ('())
     )
   )
)


(define bind 
  (lambda (f)
    (lambda(res)
      (if (result? res)
        (if (ok? res)
          (f (result->val res))
          res
        )
        res
      )
    )   
  )
)


(define make-dict
  (lambda ()
    '()
  )
)


(define dict?
  (lambda (e)
      (if(empty? e)
       #t 
       (and (pair? (car e)) (dict? (cdr e))))
  )
)


(define get
  (lambda (dict k)
    (if (dict? dict)
      (if (empty? dict)
        (make-error "Key not found")
        (if (eq? (car(car dict)) k)
          (make-ok (cdr (car dict)))
          (get (cdr dict) k)
        )
      )
      (make-error "Error: not a dictionary" )
    )
  )
)



(define put
  (lambda (dict k v)
    (if (dict? dict)
      (if (error? (get dict k))
        (make-ok (cons (cons k v) dict))
        (if (empty? dict)
        (list k v)
          (if (eq? (car(car dict)) k)
              (make-ok (cons (cons k v) (cdr dict)))
              (make-ok ((cons (car dict) (put (cdr dict) k v))))
          )
        )
      )
      (make-error "Error: not a dictionary")
    )
  )
)


(define map-dict
  (lambda (dict f)
    (if (dict? dict)
      (make-ok (helper1 dict f))
      (make-error "Error: not a dict")
    )
  )
)

(define helper1
  (lambda (dict f)
    (if (empty? dict)
      '()
      (cons 
        (cons 
          (car(car dict)) 
          (f (cdr(car dict)))
        ) 
        (helper1 (cdr dict) f)
      )
    )
  )
)


(define filter-dict
  (lambda (dict pred)
    (if (dict? dict)
      (make-ok (helper2 dict pred))
      (make-error "Error: not a dict")
    )
  )
)

(define helper2
  (lambda (dict pred)
    (if(empty? dict)
      '()
      (if (pred (car(car dict)) (cdr(car dict)) )
        (cons 
          (car dict) 
          (helper2 (cdr dict) pred)
        )
        (helper2 (cdr dict) pred)
      )
    )
  )
) 
  



 